{"version":3,"file":"static/js/json_percent.258e0728.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/core/render/RadialLabel.ts","../node_modules/src/.internal/core/render/RadialText.ts","../node_modules/src/.internal/core/render/Slice.ts","../node_modules/src/.internal/charts/percent/PercentDefaultTheme.ts","../node_modules/src/.internal/charts/percent/PercentChart.ts","../node_modules/src/.internal/charts/percent/PercentSeries.ts","../node_modules/src/.internal/charts/pie/PieChart.ts","../node_modules/src/.internal/charts/pie/PieSeries.ts","../node_modules/src/.internal/charts/funnel/FunnelSlice.ts","../node_modules/src/.internal/charts/funnel/FunnelSeries.ts","../node_modules/src/.internal/charts/funnel/PyramidSeries.ts","../node_modules/src/.internal/charts/funnel/PictorialStackedSeries.ts","../node_modules/src/.internal/charts/funnel/SlicedChart.ts","../node_modules/d3-shape/src/math.js","../node_modules/d3-shape/src/arc.js"],"sourcesContent":["// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label, ILabelPrivate, ILabelSettings } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\n\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\n\nexport interface IRadialLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Pixel value to adjust radius with.\n\t *\n\t * Will add to (or subtract from if negative) whatever value `baseRadius` evaluates\n\t * to.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Radius of the label's position.\n\t *\n\t * Can be either set in absolute pixel value, or percent.\n\t *\n\t * Relative value, depending on the situation, will most often mean its\n\t * position within certain circular object, like a slice: 0% meaning inner\n\t * edge, and 100% - the outer edge.\n\t *\n\t * @default 100%\n\t */\n\tbaseRadius?: number | Percent;\n\n\t/**\n\t * Label anngle in degrees.\n\t *\n\t * In most cases it will be set by the chart/series and does not need to\n\t * be set manually.\n\t */\n\tlabelAngle?: number;\n\n\t/**\n\t * Should the text \"face\" inward or outward from the arc the text is\n\t * following.\n\t *\n\t * `\"auto\"` means that facing will be chosen automatically based on the angle\n\t * to enhance readbility.\n\t *\n\t * Only applies if `type = \"circluar\"`.\n\t * \n\t * @default \"auto\"\n\t */\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\n\t/**\n\t * Should label be drawn inside (`true`) or outside (`false`) the arc.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n\n\t/**\n\t * Label type.\n\t *\n\t * * `\"regular\"` (default) - normal horizontal label.\n\t * * `\"circular\"` - arched label.\n\t * * `\"radial\"` - label radiating from the center of the arc.\n\t * * `\"aligned\"` - horizontal label aligned with other labels horizontally.\n\t * * `\"adjusted\"` - horizontal label adjusted in postion.\n\t *\n\t * **IMPORTANT!** If the label is used in a [[PieSeries]], its `alignLabels` setting\n\t * (default: `true`) takes precedence over `textType`. If you need to set this\n\t * to anything else than `regular`, make sure you also set `alignLabels: falese` on\n\t * `PieSeries`.\n\t *\n\t * @default \"regular\"\n\t */\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\n\t/**\n\t * Extra spacing between characters, in pixels.\n\t *\n\t * @default 0\n\t */\n\tkerning?: number;\n\n}\n\nexport interface IRadialLabelPrivate extends ILabelPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tleft?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tradius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tinnerRadius?: number;\n\n}\n\nexport class RadialLabel extends Label {\n\n\tdeclare public _settings: IRadialLabelSettings;\n\tdeclare public _privateSettings: IRadialLabelPrivate;\n\n\tdeclare protected _text: RadialText;\n\n\tpublic static className: string = \"RadialLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([RadialLabel.className]);\n\n\tprotected _flipped: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis._textKeys.push(\"textType\", \"kerning\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(RadialText.new(this._root, {}));\n\t}\n\n\t/**\n\t * Returns base radius in pixels.\n\t * \n\t * @return Base radius\n\t */\n\tpublic baseRadius(): number {\n\t\tconst radiusPrivate = this.getPrivate(\"radius\", 0);\n\t\tconst innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n\t\tconst baseRadius = this.get(\"baseRadius\", 0);\n\t\treturn innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n\t}\n\n\t/**\n\t * Returns radius adjustment in pixels.\n\t * \n\t * @return Radius\n\t */\n\tpublic radius(): number {\n\t\tconst inside = this.get(\"inside\", false);\n\t\treturn this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n\n\t\t\tconst textType = this.get(\"textType\", \"adjusted\");\n\n\t\t\tconst inside = this.get(\"inside\", false);\n\n\t\t\tconst orientation = this.get(\"orientation\");\n\t\t\tlet labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n\t\t\tthis._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\t\t\tthis._text.set(\"inside\", inside);\n\n\t\t\tconst sin = $math.sin(labelAngle);\n\t\t\tconst cos = $math.cos(labelAngle);\n\n\t\t\tlet baseRadius = this.baseRadius();\n\t\t\tlet radius = this.radius();\n\n\t\t\tthis._display.angle = 0;\n\n\t\t\tif (textType == \"circular\") {\n\n\t\t\t\tthis.setAll({\n\t\t\t\t\tpaddingTop: 0,\n\t\t\t\t\tpaddingBottom: 0,\n\t\t\t\t\tpaddingLeft: 0,\n\t\t\t\t\tpaddingRight: 0\n\t\t\t\t});\n\n\t\t\t\t// Circular labels are handled and positioned differently\n\n\t\t\t\tthis._text.set(\"orientation\", orientation);\n\t\t\t\tthis._text.set(\"radius\", radius);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (baseRadius == 0) {\n\t\t\t\t\tlabelAngle = 0;\n\t\t\t\t\tradius = 0;\n\t\t\t\t}\n\n\t\t\t\t// Positioning of radial/regular labels are teh same\n\t\t\t\tlet x = radius * cos;\n\t\t\t\tlet y = radius * sin;\n\n\t\t\t\tif (textType == \"radial\") {\n\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\n\t\t\t\t\tif ((labelAngle < 90) || (labelAngle > 270) || orientation != \"auto\") {\n\t\t\t\t\t\tthis._display.angle = labelAngle;// + 90;\n\t\t\t\t\t\tthis._flipped = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._display.angle = labelAngle + 180;\n\t\t\t\t\t\tthis._flipped = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._dirty.rotation = false;\n\t\t\t\t}\n\t\t\t\telse if (textType == \"adjusted\") {\n\t\t\t\t\tthis.setRaw(\"centerX\", p50);\n\t\t\t\t\tthis.setRaw(\"centerY\", p50);\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t\telse if (textType == \"regular\") {\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markDirtyPosition();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n\n\tpublic _updatePosition() {\n\n\t\tconst textType = this.get(\"textType\", \"regular\");\n\t\tconst inside = this.get(\"inside\", false);\n\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\t\tlet labelAngle = this.get(\"labelAngle\", 0);\n\t\tlet bounds = this.localBounds();\n\t\tlet w = bounds.right - bounds.left;\n\t\tlet h = bounds.bottom - bounds.top;\n\n\t\tif (textType == \"radial\") {\n\t\t\tif (this._flipped) {\n\t\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\t\tif (centerX instanceof Percent) {\n\t\t\t\t\tw = w * (1 - centerX.value * 2);\n\t\t\t\t}\n\n\t\t\t\tdx = w * $math.cos(labelAngle);\n\t\t\t\tdy = w * $math.sin(labelAngle);\n\t\t\t}\n\t\t}\n\t\telse if (!inside && textType == \"adjusted\") {\n\t\t\tdx = w / 2 * $math.cos(labelAngle);\n\t\t\tdy = h / 2 * $math.sin(labelAngle);\n\t\t}\n\n\n\t\tthis.setRaw(\"dx\", dx);\n\t\tthis.setRaw(\"dy\", dy);\n\n\t\tsuper._updatePosition();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get text(): RadialText {\n\t\treturn this._text;\n\t}\n\n}\n","import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"shiftRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tlet startAngle = this.get(\"startAngle\", 0);\n\t\t\tlet arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\n\t\t\tif(arc < 0){\n\t\t\t\tstartAngle = startAngle + arc;\n\t\t\t\tarc = arc * -1;\n\t\t\t}\n\n\t\t\tif(arc > 0.1){ // this fixes bug with full circle when arc is very small\n\t\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\t}\n\t\t\tgenerator.context(this._display as any);\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\t\t\t\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n","import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/percent\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PercentSeries\").setAll({\r\n\t\t\tlegendLabelText: \"{category}\",\r\n\t\t\tlegendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/pie\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PieChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t})\r\n\r\n\t\tr(\"PieSeries\").setAll({\r\n\t\t\talignLabels: true,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).setAll({\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tisMeasured: false,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\ttoggleKey: \"active\",\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tstrokeOpacity: 1,\r\n\t\t\trole: \"figure\",\r\n\t\t\tlineJoin:\"round\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n\r\n\t\tr(\"RadialLabel\", [\"pie\"]).setAll({\r\n\t\t\ttextType: \"aligned\",\r\n\t\t\tradius: 10,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tpaddingTop: 5,\r\n\t\t\tpaddingBottom: 5,\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pie\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/funnel\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SlicedChart\").setAll({\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Funnel\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"FunnelSeries\").setAll({\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\talignLabels: true,\r\n\t\t\tsequencedInterpolation: true\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0,\r\n\t\t\t//tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 })\r\n\r\n\t\tr(\"Label\", [\"funnel\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\t// Class: Label\r\n\t\tr(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"funnel\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tstrokeOpacity: 0,\r\n\t\t\texpandDistance: -0.1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 10,\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 10\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pyramid\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"PyramidSeries\").setAll({\r\n\t\t\tvalueIs: \"area\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n\r\n\t\tr(\"Label\", [\"pyramid\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pyramid\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pictorial\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\t// Class: FunnelSlice\r\n\t\tr(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pictorial\"]).setAll({\r\n\t\t\tlocation: 0.5\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { PercentSeries } from \"./PercentSeries\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\n/**\n * Base class for [[PieChart]].\n *\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\n *\n * @important\n */\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(PercentDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\t\n\t}\t\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\nimport type { PercentChart } from \"./PercentChart\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visual element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labels be aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\n\t/**\n\t * Calculate average value in series.\n\t */\n\tvalueAverage?: number;\n\n\t/**\n\t * Count of items in series.\n\t */\n\tvalueCount?: number;\n\n\t/**\n\t * Sum of values in series.\n\t */\n\tvalueSum?: number;\n\n\t/**\n\t * Sum of all absolute values in series.\n\t */\n\tvalueAbsoluteSum?: number;\n\n\t/**\n\t * Lowest value in series.\n\t */\n\tvalueLow?: number;\n\n\t/**\n\t * Highest value in series.\n\t */\n\tvalueHigh?: number;\n\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this._makeSlices();\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\tpublic abstract chart: PercentChart | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this._makeLabels();\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this._makeTicks();\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = Infinity;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tif (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\t\t\t});\n\t\t}\n\n\t\tthis._arrange();\n\t}\n\n\tprotected _arrange() {\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t}\n\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tthis._arrange();\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tif(slice.get(\"active\")){\n\t\t\tslice.states.applyAnimate(\"active\");\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tslice.hideTooltip();\n\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic hoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice && !slice.isHidden()) {\n\t\t\tslice.hover();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers un-hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic unhoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tslice.unhover();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif(dataItem){\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\t\tif (legendDataItem) {\n\t\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\t\tif (slice.get(setting) != null) {\n\t\t\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\n}\n","import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\n\t/**\n\t * Actual radius of the series in pixels.\n\t */\n\tradius?: number;\n\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart._maxRadius;\n\t\t}\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn -chart._maxRadius;\n\t\t}\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet textType = labelsTemplate.get(\"textType\");\n\t\t\t\t\tif (textType == null || textType == \"aligned\") {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\t//if (radius > 0) {\n\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t})\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\t\t\tlet points:Array<IPoint> = [];\n\n\t\t\tif(x != 0 && y != 0){\n\t\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\t\tconst labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\n\t\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t\t}\n\n\t\t\t\tlet dx = -pr;\n\t\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\t\tdx = pl;\n\t\t\t\t}\n\t\t\t\tpoints = [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }];\t\t\t\t\n\t\t\t}\n\n\t\t\ttick.set(\"points\", points);\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\tconst startAngle = slice.get(\"startAngle\", 0);\n\t\t\t\tconst arc = slice.get(\"arc\", 0);\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tconst angle = startAngle + arc * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nexport interface IFunnelSliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Top width in pixels.\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * Bottom width in pixels.\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Orientation.\n\t */\n\torientation?: \"vertical\" | \"horizontal\";\n\n\t/**\n\t * A distance in pixels the slice should \"puff up\".\n\t *\n\t * Any non-zero value will make sides of the slide curved.\n\t */\n\texpandDistance?: number;\n\n}\n\nexport interface IFunnelSlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice for [[FunnelSeries]].\n */\nexport class FunnelSlice extends Graphics {\n\tdeclare public _settings: IFunnelSliceSettings;\n\tdeclare public _privateSettings: IFunnelSlicePrivate;\n\n\tpublic static className: string = \"FunnelSlice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([FunnelSlice.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tprotected _tlx: number = 0;\n\tprotected _tly: number = 0;\n\n\tprotected _trx: number = 0;\n\tprotected _try: number = 0;\n\n\tprotected _blx: number = 0;\n\tprotected _bly: number = 0;\n\n\tprotected _brx: number = 0;\n\tprotected _bry: number = 0;\n\n\tprotected _cprx: number = 0;\n\tprotected _cplx: number = 0;\n\tprotected _cpry: number = 0;\n\tprotected _cply: number = 0;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(this._tlx, this._tly);\n\t\t\tdisplay.lineTo(this._trx, this._try);\n\t\t\tdisplay.quadraticCurveTo(this._cprx, this._cpry, this._brx, this._bry);\n\t\t\tdisplay.lineTo(this._blx, this._bly);\n\t\t\tdisplay.quadraticCurveTo(this._cplx, this._cply, this._tlx, this._tly);\n\t\t})\n\t}\n\n\tpublic getPoint(locationX: number, locationY: number): IPoint {\n\t\tlet w = this.width();\n\t\tlet h = this.height();\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", 0);\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationY;\n\t\t\tlet mrx = trx + (brx - trx) * locationY;\n\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\n\t\t}\n\t\telse {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationX;\n\t\t\tlet mrx = trx + (brx - trx) * locationX;\n\n\t\t\treturn { x: w * locationX, y: mlx + (mrx - mlx) * locationY};\n\t\t}\n\n\t}\n\n\tpublic _changed() {\n\n\t\tif (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tconst w = this.width();\n\t\t\tconst h = this.height();\n\t\t\tconst tw = this.get(\"topWidth\", 0);\n\t\t\tconst bw = this.get(\"bottomWidth\", 0);\n\t\t\tthis._clear = true;\n\n\t\t\tlet ed = this.get(\"expandDistance\", 0);\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tthis._tlx = -tw / 2;\n\t\t\t\tthis._tly = 0;\n\n\t\t\t\tthis._trx = tw / 2;\n\t\t\t\tthis._try = 0;\n\n\t\t\t\tthis._brx = bw / 2;\n\t\t\t\tthis._bry = h;\n\n\t\t\t\tthis._blx = -bw / 2;\n\t\t\t\tthis._bly = h;\n\n\t\t\t\tthis._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\n\t\t\t\tthis._cpry = this._try + 0.5 * h;\n\n\t\t\t\tthis._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\n\t\t\t\tthis._cply = this._tly + 0.5 * h;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._tly = -tw / 2;\n\t\t\t\tthis._tlx = 0;\n\n\t\t\t\tthis._try = tw / 2;\n\t\t\t\tthis._trx = 0;\n\n\t\t\t\tthis._bry = bw / 2;\n\t\t\t\tthis._brx = w;\n\n\t\t\t\tthis._bly = -bw / 2;\n\t\t\t\tthis._blx = w;\n\n\t\t\t\tthis._cpry = this._try + (this._bry - this._try) / 2 + ed * w,\n\t\t\t\tthis._cprx = this._trx + 0.5 * w;\n\n\t\t\t\tthis._cply = this._tly + (this._bly - this._tly) / 2 - ed * w;\n\t\t\t\tthis._cplx = this._tlx + 0.5 * w;\n\t\t\t}\n\t\t}\n\t\tsuper._changed();\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { SlicedChart } from \"./SlicedChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { FunnelSlice } from \"./FunnelSlice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { Label } from \"../../core/render/Label\";\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IFunnelSeriesDataItem extends IPercentSeriesDataItem {\n\n\t/**\n\t * A related slice element.\n\t */\n\tslice: FunnelSlice;\n\n\t/**\n\t * A related slice link element\n\t */\n\tlink: FunnelSlice;\n\n\t/**\n\t * Data item's index.\n\t */\n\tindex: number;\n\n}\n\nexport interface IFunnelSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Width of the bottom edge of the slice relative to the top edge of the next\n\t * slice.\n\t *\n\t * `1` - means the full width of the slice, resulting in a rectangle.\n\t * `0` - means using width of the next slice, resulting in a trapezoid.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_bottom_width} for more info\n\t * @default 1\n\t */\n\tbottomRatio?: number;\n\n\t/**\n\t * Orientation of the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/#Series_orientation} for more info\n\t * @default \"vertical\"\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n\t/**\n\t * If set to `true`, series will not create slices for data items with zero\n\t * value.\n\t */\n\tignoreZeroValues?: boolean;\n\n\t/**\n\t * Should labels be aligned into columns/rows?\n\t *\n\t * @default false\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tendLocation?: number;\n\n}\n\nexport interface IFunnelSeriesPrivate extends IPercentSeriesPrivate {\n}\n\n/**\n * Creates a funnel series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\n * @important\n */\nexport class FunnelSeries extends PercentSeries {\n\n\t/**\n\t * A chart series is attached to.\n\t */\n\tdeclare public chart: SlicedChart | undefined;\n\n\tprotected _tag = \"funnel\";\n\n\tdeclare public _sliceType: FunnelSlice;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\n\t\t\t}, [this.slices.template])\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Label._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\n\t\t\t}, [this.labels.template])\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\n\t\t\t}, [this.ticks.template])\n\t\t);\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice links in series.\n\t *\n\t * `links.template` can also be used to configure slice links.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\n\t */\n\tpublic readonly links: ListTemplate<this[\"_sliceType\"]> = this._makeLinks();\n\n\tprotected _makeLinks(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\n\t\t\t}, [this.links.template]),\n\t\t);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLink(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst link = this.slicesContainer.children.push(this.links.make());\n\t\tlink._setDataItem(dataItem);\n\t\tdataItem.set(\"link\", link);\n\t\tthis.links.push(link);\n\t\treturn link;\n\t}\n\n\tpublic static className: string = \"FunnelSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([FunnelSeries.className]);\n\n\tdeclare public _settings: IFunnelSeriesSettings;\n\tdeclare public _privateSettings: IFunnelSeriesPrivate;\n\tdeclare public _dataItemSettings: IFunnelSeriesDataItem;\n\n\tprotected _total: number = 0;\n\tprotected _count: number = 0;\n\tprotected _nextCoord: number = 0;\n\n\tprotected _opposite: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tconst slicesContainer = this.slicesContainer;\n\t\tslicesContainer.setAll({ isMeasured: true, position: \"relative\", width: percent(100), height: percent(100) });\n\t\tslicesContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tslicesContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t}\n\t\telse {\n\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice._setDataItem(dataItem);\n\n\t\tdataItem.set(\"slice\", slice);\n\n\t\tthis.makeLink(dataItem);\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.on(\"x\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tlabel.on(\"y\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\n\t\tslice.events.on(\"boundschanged\", () => {\n\t\t\tconst dataItem = slice.dataItem;\n\t\t\tif (dataItem) {\n\t\t\t\tthis._updateTick(dataItem as any);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tpublic _updateChildren() {\n\t\tthis._opposite = false;\n\t\tif (this.children.indexOf(this.labelsContainer) == 0) {\n\t\t\tthis._opposite = true;\n\t\t}\n\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tconst value = dataItem.get(\"value\");\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tcount++;\n\t\t\t\tif (value > 0) {\n\t\t\t\t\ttotal += Math.abs(dataItem.get(\"valueWorking\", value) / value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.get(\"ignoreZeroValues\", false)) {\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis._total = 1 / count * total;\n\t\tthis._count = count;\n\n\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\tthis._fixLayout();\n\t\t}\n\n\t\tif (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\n\n\t\t\tconst slicesContainer = this.slicesContainer;\n\n\t\t\tlet h: number;\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\th = slicesContainer.innerHeight();\n\t\t\t}\n\t\t\telse {\n\t\t\t\th = slicesContainer.innerWidth();\n\t\t\t}\n\n\t\t\tthis._nextCoord = this.get(\"startLocation\", 0) * h;\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet i = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\tdataItem.set(\"index\", i);\n\t\t\t\ti++;\n\n\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tconst link = dataItem.get(\"link\");\n\t\t\t\tconst color = dataItem.get(\"fill\");\n\n\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\tlink._setDefault(\"fill\", color);\n\t\t\t\tlink._setDefault(\"stroke\", color);\n\n\t\t\t\tconst value = dataItem.get(\"value\");\n\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\tif (value == 0 && this.get(\"ignoreZeroValues\")) {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", false);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", false);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", true);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", true);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", true);\n\n\t\t\t\t\t\tthis.decorateSlice(dataItem);\n\n\t\t\t\t\t\tif (this.isLast(dataItem)) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!dataItem.isHidden()) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _fixLayout() {\n\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst labelsContainer = this.labelsContainer;\n\t\tconst labelsTemplate = this.labels.template;\n\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tlabelsContainer.set(\"position\", \"relative\");\n\t\t\tlabelsContainer.setAll({ isMeasured: true });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: p100, x: p100 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: 0, x: 0 });\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlabelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tlabelsContainer.setAll({ x: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, x: 0 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabelsContainer.setAll({ y: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, y: 0 });\n\t\t\t}\n\t\t}\n\t\tthis.markDirtySize();\n\t}\n\n\tprotected getNextValue(dataItem: DataItem<this[\"_dataItemSettings\"]>): number {\n\t\tlet index = dataItem.get(\"index\");\n\t\tlet nextValue = dataItem.get(\"valueWorking\", 0);\n\t\tif (index < this.dataItems.length - 1) {\n\t\t\tlet nextItem = this.dataItems[index + 1];\n\t\t\tnextValue = nextItem.get(\"valueWorking\", 0);\n\n\t\t\tif (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\n\t\t\t\treturn this.getNextValue(nextItem);\n\t\t\t}\n\t\t}\n\t\treturn nextValue;\n\t}\n\n\tprotected isLast(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tlet index = dataItem.get(\"index\");\n\t\tif (index == this.dataItems.length - 1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tfor (let i = index + 1; i < this.dataItems.length; i++) {\n\t\t\t\tif (!this.dataItems[i].isHidden()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tlet maxWidth = slicesContainer.innerWidth();\n\t\tlet maxHeight = slicesContainer.innerHeight();\n\n\t\tlet maxSize = maxWidth;\n\t\tif (orientation == \"horizontal\") {\n\t\t\tmaxSize = maxHeight;\n\t\t}\n\n\t\tconst nextValue = this.getNextValue(dataItem);\n\t\tconst value = dataItem.get(\"value\", 0);\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\n\t\tconst bottomRatio = this.get(\"bottomRatio\", 0);\n\t\tconst valueHigh = this.getPrivate(\"valueHigh\", 0);\n\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tif (this._nextCoord == Infinity) {\n\t\t\tthis._nextCoord = 0;\n\t\t}\n\n\t\tlet topWidth = workingValue / valueHigh * maxSize;\n\t\tlet bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\n\n\t\tslice.setAll({ topWidth, bottomWidth, orientation });\n\t\tlink.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tif (orientation == \"vertical\") {\n\n\t\t\tlet linkHeight = link.height() * d;\n\n\t\t\tmaxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"y\", this._nextCoord);\n\n\t\t\tlet height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ height, x: maxWidth / 2 });\n\t\t\tlet labelY = this._nextCoord + height / 2;\n\t\t\tlabel.set(\"y\", labelY);\n\n\t\t\tthis._nextCoord += height + linkHeight;\n\t\t\tlink.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\n\t\t}\n\t\telse {\n\t\t\tlet linkHeight = link.width() * d;\n\n\t\t\tmaxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"x\", this._nextCoord);\n\n\t\t\tlet width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ width, y: maxHeight / 2 });\n\t\t\tconst labelX = this._nextCoord + width / 2;\n\t\t\tlabel.set(\"x\", labelX);\n\n\t\t\tthis._nextCoord += width + linkHeight;\n\t\t\tlink.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\n\t\t}\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").hide(duration);\n\t\treturn super.hideDataItem(dataItem, duration)\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").show(duration);\n\t\treturn super.showDataItem(dataItem, duration)\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\tconst label = dataItem.get(\"label\");\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (tick && slice && label) {\n\n\t\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\t\tconst slicesContainer = this.slicesContainer;\n\t\t\t\tlet tickLocation = tick.get(\"location\", 0.5);\n\n\t\t\t\tconst lcw = labelsContainer.width();\n\t\t\t\tconst lch = labelsContainer.height();\n\n\t\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\tconst pt = labelsContainer.get(\"paddingTop\", 0);\n\t\t\t\tconst pb = labelsContainer.get(\"paddingBottom\", 0);\n\n\t\t\t\tlet p0 = { x: 0, y: 0 };\n\t\t\t\tlet p1 = { x: 0, y: 0 };\n\t\t\t\tlet p2 = { x: 0, y: 0 };\n\n\t\t\t\tif (this._opposite) {\n\t\t\t\t\ttickLocation = 1 - tickLocation;\n\t\t\t\t}\n\n\t\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\t\tp0 = slice.getPoint(tickLocation, 0.5);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.x = lcw;\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = lcw - pl;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.x = slicesContainer.x() + slicesContainer.width();\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = p1.x + lcw - label.width() - pr;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp0 = slice.getPoint(0.5, tickLocation);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.y = lch;\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = lch - pt;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.y = slicesContainer.y() + slicesContainer.height();\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = p1.y + lch - label.height() - pb;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"points\", [p0, p1, p2]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet link = dataItem.get(\"link\");\n\t\tif (link) {\n\t\t\tthis.links.removeValue(link);\n\t\t\tlink.dispose();\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst width = slice.width();\n\t\t\t\tconst height = slice.height();\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tlet dx = 0;\n\t\t\t\tlet dy = 0;\n\t\t\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\t\t\tdy = height / 2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdx = width / 2\n\t\t\t\t}\n\n\t\t\t\tsprite.setAll({ x: slice.x() + width * locationX - dx, y: slice.y() - dy + height * locationY });\n\t\t\t}\n\t\t}\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport { FunnelSeries, IFunnelSeriesSettings, IFunnelSeriesDataItem, IFunnelSeriesPrivate } from \"./FunnelSeries\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPyramidSeriesDataItem extends IFunnelSeriesDataItem {\n\n}\n\nexport interface IPyramidSeriesSettings extends IFunnelSeriesSettings {\n\n\t/**\n\t * The width of the tip of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\ttopWidth?: number | Percent;\n\n\t/**\n\t * The width of the base of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\tbottomWidth?: number | Percent;\n\n\t/**\n\t * Determines calculation mechanism for the slice area based on value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Slice_size} for more info\n\t * @default \"area\"\n\t */\n\tvalueIs?: \"area\" | \"height\";\n\n}\n\nexport interface IPyramidSeriesPrivate extends IFunnelSeriesPrivate {\n}\n\n/**\n * Creates a pyramid series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\n * @important\n */\nexport class PyramidSeries extends FunnelSeries {\n\tprotected _tag = \"pyramid\";\n\n\tpublic static className: string = \"PyramidSeries\";\n\tpublic static classNames: Array<string> = FunnelSeries.classNames.concat([PyramidSeries.className]);\n\n\tdeclare public _settings: IPyramidSeriesSettings;\n\tdeclare public _privateSettings: IPyramidSeriesPrivate;\n\tdeclare public _dataItemSettings: IPyramidSeriesDataItem;\n\n\tprotected _nextSize: number | undefined;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._nextSize = undefined;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\t\tconst valueIs = this.get(\"valueIs\", \"area\");\n\n\t\tconst sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n\t\tif (sum == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", p100);\n\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n\t\tconst value = dataItem.get(\"value\", 0);\n\n\t\tlet sliceHeight: number;\n\t\tlet sliceBottomWidth: number;\n\n\t\tlet pyramidHeight = slicesContainer.innerHeight();\n\t\tlet pyramidWidth = slicesContainer.innerWidth();\n\t\tlet linkWidth = link.width();\n\t\tlet linkHeight = link.height();\n\n\t\tif (orientation == \"horizontal\") {\n\t\t\t[pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\n\t\t\t[linkWidth, linkHeight] = [linkHeight, linkWidth];\n\t\t}\n\n\t\tconst center = pyramidWidth / 2;\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tlinkHeight *= d;\n\n\t\tpyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n\n\t\tlet topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n\t\tif (!$type.isNumber(this._nextSize)) {\n\t\t\tthis._nextSize = topWidth;\n\t\t}\n\n\t\tlet bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n\t\tlet sliceTopWidth = this._nextSize;\n\n\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n\t\tlet c = Math.tan(Math.PI / 2 - angle);\n\t\tif (c == 0) {\n\t\t\tc = 0.00000001;\n\t\t}\n\n\t\tif (valueIs == \"area\") {\n\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n\t\t\tlet square = totalSquare * workingValue / sum;\n\n\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n\n\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n\t\t\tif (sliceHeight > 0) {\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsliceBottomWidth = sliceTopWidth;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\n\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\n\t\t}\n\n\t\tlet labelCoord = this._nextCoord + sliceHeight / 2;\n\t\tlet sliceX = center;\n\t\tlet sliceY = this._nextCoord;\n\n\t\tlet linkX = center;\n\t\tlet linkY = sliceY + sliceHeight;\n\n\t\tif (orientation == \"vertical\") {\n\t\t\tlabel.set(\"y\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._rLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\tslice.set(\"height\", sliceHeight);\n\t\t}\n\t\telse {\n\t\t\tlabel.set(\"x\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._hLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\t[sliceX, sliceY] = [sliceY, sliceX];\n\t\t\t[linkX, linkY] = [linkY, linkX];\n\n\t\t\tslice.set(\"width\", sliceHeight);\n\t\t}\n\n\t\tslice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\n\t\tlink.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\n\n\t\tthis._nextSize = sliceBottomWidth;\n\t\tthis._nextCoord += sliceHeight + linkHeight;\n\t}\n}\n","import { PyramidSeries, IPyramidSeriesSettings, IPyramidSeriesDataItem, IPyramidSeriesPrivate } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\"\n\n\nexport interface IPictorialStackedSeriesDataItem extends IPyramidSeriesDataItem {\n\n}\n\nexport interface IPictorialStackedSeriesSettings extends IPyramidSeriesSettings {\n\n\t/**\n\t * An SVG path that will define the shape of the pictorial series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/#Shape_of_the_series} for more info\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPictorialStackedSeriesPrivate extends IPyramidSeriesPrivate {\n}\n\n/**\n * Creates a pictorial series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\n * @important\n */\nexport class PictorialStackedSeries extends PyramidSeries {\n\tprotected _tag = \"pictorial\";\n\n\tpublic static className: string = \"PictorialStackedSeries\";\n\tpublic static classNames: Array<string> = PyramidSeries.classNames.concat([PictorialStackedSeries.className]);\n\n\tdeclare public _settings: IPictorialStackedSeriesSettings;\n\tdeclare public _privateSettings: IPictorialStackedSeriesPrivate;\n\tdeclare public _dataItemSettings: IPictorialStackedSeriesDataItem;\n\n\t/**\n\t * A [[Graphics]] element to used as a mask (shape) for the series.\n\t *\n\t * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\n\t */\n\tpublic readonly seriesMask: Graphics = Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 });\n\n\tpublic readonly seriesGraphics: Graphics = this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }));\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"topWidth\", p100);\n\t\tthis.set(\"bottomWidth\", p100);\n\t\tthis.set(\"valueIs\", \"height\");\n\t\tthis.slicesContainer.set(\"mask\", this.seriesMask);\n\t}\n\n\tprotected _updateScale() {\n\t\tlet slicesContainer = this.slicesContainer;\n\n\t\tlet w = slicesContainer.innerWidth();\n\t\tlet h = slicesContainer.innerHeight();\n\n\t\tlet seriesMask = this.seriesMask;\n\t\tlet seriesGraphics = this.seriesGraphics;\n\t\tlet scale = seriesMask.get(\"scale\", 1);\n\n\t\tconst bounds = seriesMask.localBounds();\n\n\t\tlet mw = bounds.right - bounds.left;\n\t\tlet mh = bounds.bottom - bounds.top;\n\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\tscale = w / mw;\n\t\t}\n\t\telse {\n\t\t\tscale = h / mh;\n\t\t}\n\t\tif (scale != Infinity && scale != NaN) {\n\t\t\tseriesMask.set(\"scale\", scale);\n\t\t\tseriesMask.set(\"x\", w / 2);\n\t\t\tseriesMask.set(\"y\", h / 2);\n\n\t\t\tseriesGraphics.set(\"scale\", scale);\n\t\t\tseriesGraphics.set(\"x\", w / 2);\n\t\t\tseriesGraphics.set(\"y\", h / 2);\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tthis.seriesMask.set(\"svgPath\", svgPath);\n\t\t\tthis.seriesGraphics.set(\"svgPath\", svgPath);\n\t\t}\n\n\t\tthis._updateScale();\n\t}\n\n}\n","import { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport type { PercentSeries } from \"../percent/PercentSeries\";\n\n\nexport interface ISlicedChartSettings extends IPercentChartSettings {\n}\n\nexport interface ISlicedChartPrivate extends IPercentChartPrivate {\n}\n\n/**\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class SlicedChart extends PercentChart {\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.seriesContainer.setAll({ isMeasured:true, layout: this._root.horizontalLayout });\n\t}\n\n\tpublic static className: string = \"SlicedChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([SlicedChart.className]);\n\n\tdeclare public _settings: ISlicedChartSettings;\n\tdeclare public _privateSettings: ISlicedChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n}\n","export const abs = Math.abs;\nexport const atan2 = Math.atan2;\nexport const cos = Math.cos;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sin = Math.sin;\nexport const sqrt = Math.sqrt;\n\nexport const epsilon = 1e-12;\nexport const pi = Math.PI;\nexport const halfPi = pi / 2;\nexport const tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\nimport {withPath} from \"./path.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null,\n      path = withPath(arc);\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle. If this\n        // intersection fails, it’s probably because the arc is too small, so\n        // disable the corner radius entirely.\n        if (da < pi) {\n          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {\n            var ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = min(rc, (r0 - lc) / (kc - 1));\n            rc1 = min(rc, (r1 - lc) / (kc + 1));\n          } else {\n            rc0 = rc1 = 0;\n          }\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n"],"names":["RadialLabel","Label","constructor","Object","defineProperty","_afterNew","this","_textKeys","push","super","_makeText","_text","children","RadialText","new","_root","baseRadius","radiusPrivate","getPrivate","innerRadiusPrivate","get","$utils","radius","inside","_updateChildren","isDirty","isPrivateDirty","textType","orientation","labelAngle","$math","set","sin","cos","_display","angle","setAll","paddingTop","paddingBottom","paddingLeft","paddingRight","x","y","setRaw","_flipped","_dirty","rotation","p50","markDirtyPosition","markDirtyBounds","_updatePosition","dx","dy","bounds","localBounds","w","right","left","h","bottom","top","centerX","Percent","value","text","classNames","concat","className","Text","_renderer","makeRadialText","textStyle","_beforeChanged","clear","startAngle","kerning","Slice","Graphics","arc","_getTooltipPoint","tooltipX","tooltipY","$type","innerRadius","ix","iy","_clear","_changed","generator","_generator","cornerRadius","context","outerRadius","endAngle","middleAngle","shiftRadius","PercentDefaultTheme","Theme","setupDefaultRules","ic","interfaceColors","r","rule","bind","legendLabelText","legendValueText","colors","ColorSet","width","p100","height","percent","alignLabels","states","create","opacity","position","isMeasured","toggleKey","tooltipText","strokeWidth","strokeOpacity","role","lineJoin","scale","populateText","location","startLocation","endLocation","sequencedInterpolation","interactive","expandDistance","centerY","fillOpacity","valueIs","setColor","PercentChart","SerialChart","_defaultThemes","chartContainer","seriesContainer","bulletsContainer","_processSeries","series","moveValue","length","PercentSeries","Series","Container","_makeSlices","_makeLabels","_makeTicks","makeSlice","dataItem","slice","slicesContainer","slices","make","on","updateLegendMarker","_setDataItem","makeLabel","label","labelsContainer","labels","_shouldMakeBullet","makeTick","tick","ticksContainer","ticks","fields","_onDataClear","reset","_prepareChildren","_lLabels","_rLabels","_hLabels","_valuesDirty","sum","absSum","valueHigh","valueLow","Infinity","count","$array","_dataItems","valueWorking","Math","abs","percentTotal","setPrivateRaw","show","duration","promises","_super","call","_sequencedShowHide","Promise","all","hide","markDirtyText","updateLegendValue","_arrange","_arrangeDown","_arrangeUp","_arrangeLeft","_arrangeRight","dataItems","_updateTick","_afterChanged","processDataItem","next","showDataItem","easing","animation","animate","key","to","waitForStop","applyAnimate","hideDataItem","hiddenState","hideTooltip","disposeDataItem","removeValue","dispose","hoverDataItem","isHidden","hover","unhoverDataItem","unhover","legendDataItem","markerRectangle","visualSettings","setting","_getNextDown","sort","a","b","l","adjustedLocalBounds","labelTop","_getNextUp","maxHeight","labelBottom","labelLeft","maxWidth","labelRight","_updateSize","markDirty","_dataItem","_dispose","chart","PieChart","innerWidth","innerHeight","wr","hr","innerBounds","mr","min","max","prevRadius","_maxRadius","each","_markDirtyKey","index","indexOf","seriesRadius","seriesInnerRadius","PieSeries","ListTemplate","Template","_new","themeTags","template","Tick","events","labelsTemplate","currentAngle","currentArc","color","_setDefault","setPrivate","labelRadius","isHiding","pl","pr","points","_positionBullet","bullet","sprite","FunnelSlice","display","moveTo","_tlx","_tly","lineTo","_trx","_try","quadraticCurveTo","_cprx","_cpry","_brx","_bry","_blx","_bly","_cplx","_cply","getPoint","locationX","locationY","tw","bw","tlx","trx","mlx","ed","FunnelSeries","_makeLinks","_tag","links","makeLink","link","onPrivate","markDirtySize","horizontalLayout","verticalLayout","_opposite","total","_total","_count","_fixLayout","_sizeDirty","_nextCoord","i","decorateSlice","isLast","getNextValue","nextValue","nextItem","maxSize","workingValue","bottomRatio","d","topWidth","bottomWidth","linkHeight","labelY","labelX","tickLocation","lcw","lch","pt","pb","p0","p1","p2","PyramidSeries","_nextSize","undefined","sliceHeight","sliceBottomWidth","pyramidHeight","pyramidWidth","linkWidth","center","sliceTopWidth","atan2","c","tan","PI","square","s","sqrt","labelCoord","sliceX","sliceY","linkX","linkY","PictorialStackedSeries","seriesMask","_updateScale","seriesGraphics","mw","mh","NaN","svgPath","SlicedChart","layout","epsilon","pi","halfPi","tau","asin","arcInnerRadius","arcOuterRadius","arcStartAngle","arcEndAngle","arcPadAngle","padAngle","cornerTangents","x0","y0","x1","y1","r1","rc","cw","x01","y01","lo","ox","oy","x11","y11","x10","y10","x00","y00","d2","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","constant","padRadius","path","withPath","buffer","r0","apply","arguments","a0","a1","da","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","rc0","rc1","oc","x2","y2","x3","y3","x32","y32","t","intersect","ax","ay","bx","by","kc","acos","lc","closePath","centroid","_"],"sourceRoot":""}